// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel Depth
#pragma kernel DrawDepth

Texture2D<float4> pixelBuffer;
RWTexture2D<float4> outputBuffer;
StructuredBuffer<uint> depthBuffer;
RWStructuredBuffer<uint> leftDepthBuffer;

uint imageWidth;
uint imageHeight;

[numthreads(8, 8, 1)]
void Depth(uint3 id : SV_DispatchThreadID)
{
    uint depth = depthBuffer[(id.y * imageWidth + id.x) / 2];
    uint upperHalf = depth >> 16;
    uint lowerHalf = depth & (0xFFFF);
    if ((id.x & 1) == 0)
    {
        depth = lowerHalf;
    }
    else
    {
        depth = upperHalf;
    }
    if (depth != 0)
    {
        float newPos = id.x - 31.5 * imageWidth / depth;
        uint roundedNewPos = round(newPos);
        if (roundedNewPos >= 0 && roundedNewPos < imageWidth)
        {
            InterlockedMin(leftDepthBuffer[id.y * imageWidth + roundedNewPos], depth);
        }
    }
}

[numthreads(8, 8, 1)]
void DrawDepth(uint3 id : SV_DispatchThreadID)
{
    uint depth = depthBuffer[(id.y * imageWidth + id.x) / 2];
    uint upperHalf = depth >> 16;
    uint lowerHalf = depth & (0xFFFF);
    if ((id.x & 1) == 0)
    {
        depth = lowerHalf;
    }
    else
    {
        depth = upperHalf;
    }
    if (depth != 0)
    {
        float newPos = id.x - 31.5 * imageWidth / depth;
        uint roundedNewPos = round(newPos);
        if (roundedNewPos >= 0 && roundedNewPos < imageWidth && leftDepthBuffer[id.y * imageWidth + roundedNewPos] == depth)
        {
            outputBuffer[int2(imageWidth - roundedNewPos - 1, id.y)] = pixelBuffer[int2(id.x, imageHeight - id.y - 1)];
        }
    }
    /*
    else
    {
        outputBuffer[int2(imageWidth - id.x - 1, id.y)] = pixelBuffer[int2(id.x, imageHeight - id.y - 1)];
    }
    */
}